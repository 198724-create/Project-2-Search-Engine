// --- API key helpers (kept from your Step 4) ---
const KEY_STORAGE = 'giphy_api_key';
function getApiKey(){
  let key = localStorage.getItem(KEY_STORAGE);
  if (!key) {
    key = prompt('Enter your GIPHY API key (do NOT commit this key):');
    if (key) localStorage.setItem(KEY_STORAGE, key.trim());
  }
  return key;
}
function ensureKeyOrWarn(){
  const key = getApiKey();
  const statusEl = document.getElementById('status');
  if (!key) {
    if (statusEl) statusEl.textContent = 'Missing API key. Please refresh and enter your key.';
    return false;
  }
  return true;
}

// --- UI helpers / grabs ---
function scrollTopSmooth(){ window.scrollTo({ top: 0, behavior: 'smooth' }); }

const form = document.getElementById('searchForm');
const grid = document.getElementById('grid');
const statusEl = document.getElementById('status');
const empty = document.getElementById('empty');
const ratingEl = document.getElementById('rating');
const limitEl = document.getElementById('limit');
const pagination = document.getElementById('pagination');
const loading = document.getElementById('loading');
function setLoading(on){ if (loading) loading.hidden = !on; }

// prefs
const PREFS_KEY = 'gif_prefs';
function savePrefs(q, rating, limit){
  localStorage.setItem(PREFS_KEY, JSON.stringify({ q, rating, limit }));
}
function loadPrefs(){
  try { return JSON.parse(localStorage.getItem(PREFS_KEY) || '{}'); }
  catch { return {}; }
}
document.addEventListener('DOMContentLoaded', () => {
  const prefs = loadPrefs();
  if (prefs.q) document.getElementById('query').value = prefs.q;
  if (prefs.rating) ratingEl.value = prefs.rating;
  if (prefs.limit) limitEl.value = prefs.limit;
});

let offset = 0;
let typeTimer;

// --- Listeners ---
form.addEventListener('submit', (e) => {
  e.preventDefault();
  offset = 0;
  if (!ensureKeyOrWarn()) return;
  search();
});

const clearBtn = document.getElementById('clearBtn');
if (clearBtn){
  clearBtn.addEventListener('click', () => {
    document.getElementById('query').value = '';
    offset = 0;
    grid.innerHTML = '';
    pagination.innerHTML = '';
    statusEl.textContent = '';
    empty.style.display = 'block';
    empty.textContent = 'Try a search to see results ✨';
    document.getElementById('query').focus();
  });
}

document.getElementById('query').addEventListener('input', () => {
  clearTimeout(typeTimer);
  const q = document.getElementById('query').value.trim();
  if (!q) return;
  typeTimer = setTimeout(() => {
    offset = 0;
    if (!ensureKeyOrWarn()) return;
    search();
  }, 400);
});

ratingEl.addEventListener('change', () => {
  const q = document.getElementById('query').value.trim();
  if (!q) return;
  offset = 0; if (!ensureKeyOrWarn()) return; search();
});

limitEl.addEventListener('change', () => {
  const q = document.getElementById('query').value.trim();
  if (!q) return;
  offset = 0; if (!ensureKeyOrWarn()) return; search();
});

document.addEventListener('keydown', (e) => {
  if (e.key !== 'ArrowLeft' && e.key !== 'ArrowRight') return;
  const prevBtn = [...pagination.querySelectorAll('button')].find(b => b.textContent === 'Prev');
  const nextBtn = [...pagination.querySelectorAll('button')].find(b => b.textContent === 'Next');
  if (e.key === 'ArrowLeft' && prevBtn && !prevBtn.disabled) prevBtn.click();
  if (e.key === 'ArrowRight' && nextBtn && !nextBtn.disabled) nextBtn.click();
});

// --- Search flow ---
async function search(){
  const API_KEY = getApiKey();
  const q = document.getElementById('query').value.trim();
  const rating = ratingEl.value;
  const limit = Math.max(1, Math.min(50, parseInt(limitEl?.value || '18', 10)));

  if (!q){
    statusEl.textContent = 'Please enter a search term.';
    setLoading(false);
    return;
  }

  setLoading(true);
  statusEl.textContent = 'Loading…';
  empty.style.display = 'none';
  grid.innerHTML = '';
  pagination.innerHTML = '';

  const url = new URL('https://api.giphy.com/v1/gifs/search');
  url.searchParams.set('api_key', API_KEY);
  url.searchParams.set('q', q);
  url.searchParams.set('limit', limit);
  url.searchParams.set('offset', offset);
  url.searchParams.set('rating', rating);
  url.searchParams.set('lang', 'en');

  try {
    const res = await fetch(url);
    if (!res.ok) throw new Error('Network error');
    const json = await res.json();
    renderResults(json, q);
    savePrefs(q, rating, limit);
  } catch (err) {
    console.error(err);
    const offline = !navigator.onLine;
    statusEl.textContent = offline
      ? 'You appear to be offline. Check your connection and try again.'
      : 'Error fetching results. Check your API key or try again.';
    empty.style.display = 'block';
    empty.textContent = 'No results to display.';
  } finally {
    setLoading(false);
  }
}

function renderResults(json, q){
  scrollTopSmooth();

  const items = json.data || [];
  const p = json.pagination || {};

  statusEl.textContent = items.length
    ? `Showing ${items.length} for "${q}"`
    : `No results for "${q}"`;

  if (!items.length) {
    empty.style.display = 'block';
    empty.textContent = 'No results. Try different keywords or a lower rating.';
    return;
  }

  const frag = document.createDocumentFragment();
  items.forEach(gif => {
    const imgObj = gif.images?.fixed_width || gif.images?.downsized || gif.images?.original;
    const url = imgObj?.url;

    const card = document.createElement('article');
    card.className = 'card';

    const img = document.createElement('img');
    img.loading = 'lazy';
    img.src = url;
    img.alt = gif.title || 'GIF';
    card.appendChild(img);

    const meta = document.createElement('div');
    meta.className = 'meta';
    const user = gif.username ? `@${gif.username}` : 'GIPHY';
    const a = document.createElement('a');
    a.href = gif.url; a.target = '_blank'; a.rel = 'noreferrer'; a.textContent = 'View';
    meta.append(user, a);

    const copyBtn = document.createElement('button');
    copyBtn.type = 'button';
    copyBtn.textContent = 'Copy URL';
    copyBtn.onclick = async () => {
      try { if (url) { await navigator.clipboard.writeText(url); copyBtn.textContent = 'Copied!'; setTimeout(()=>copyBtn.textContent='Copy URL',1200); } }
      catch { alert('Could not copy'); }
    };
    meta.append(copyBtn);

    card.appendChild(meta);
    frag.appendChild(card);
  });
  grid.appendChild(frag);

  buildPagination(p);
}

function buildPagination(p){
  pagination.innerHTML = '';
  if (!p || !p.count) return;

  const prev = document.createElement('button');
  prev.textContent = 'Prev';
  prev.disabled = (p.offset <= 0);
  prev.onclick = () => { offset = Math.max(0, p.offset - p.count); search(); scrollTopSmooth(); };

  const next = document.createElement('button');
  next.textContent = 'Next';
  const atEnd = (p.offset + p.count >= (p.total_count || 0));
  next.disabled = atEnd;
  next.onclick = () => { offset = p.offset + p.count; search(); scrollTopSmooth(); };

  const info = document.createElement('span');
  const page = Math.floor(p.offset / p.count) + 1;
  const pages = Math.max(1, Math.ceil((p.total_count || 0) / p.count));
  info.style.padding = '6px 10px';
  info.textContent = `Page ${page} / ${pages}`;

  pagination.append(prev, info, next);
}
